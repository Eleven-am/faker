import { Schema, SchemaImpl } from './schema';
import { GeneratorContext } from './context';
import { Infer } from './types';

// --- Types ---

// Type helper for a readonly array of schemas representing the tuple elements
export type TupleSchemaArray = readonly Schema<any>[];

// Helper type to infer the resulting tuple type (fixed-length array with specific types)
// Uses mapped types on the array/tuple
export type TupleOutputType<T extends TupleSchemaArray> = {
    -readonly [K in keyof T]: T[K] extends Schema<any> ? Infer<T[K]> : never;
};

// --- Generator ---

/**
 * Creates a schema that generates a fixed-length array (tuple)
 * where each element is generated by the corresponding schema in the input array.
 * @param schemas A readonly array of schemas defining the structure of the tuple.
 */
export function tuple<T extends TupleSchemaArray>(
    ...schemas: T // Use rest parameters for a cleaner call signature f.tuple(schema1, schema2)
): Schema<TupleOutputType<T>> {
    if (!schemas || schemas.length === 0) {
        throw new Error('[F] f.tuple requires at least one schema.');
    }

    const generator = (context: GeneratorContext): TupleOutputType<T> => {
        const { rng, cache } = context; // Inherit RNG, cache

        // Base context for generating tuple elements
        const tupleContextBase: Omit<
            GeneratorContext,
            'index' | 'key' | 'parent' | 'path' | 'options'
        > = {
            rng: rng, // Use the same RNG sequence for the whole tuple
            cache: cache,
            locale: context.locale,
            seed: context.seed,
        };

        // Map over the input schemas to generate each element
        const result = schemas.map((elementSchema, index) => {
            // Generate value for this tuple position
            return elementSchema.generate({
                ...tupleContextBase,
                index: index, // Pass the current tuple index
                key: String(index), // Key is the index as a string
                // parent: ??? // What should parent be for a tuple element? Maybe the tuple itself?
                // For now, let's omit parent or pass the context's parent if it exists
                parent: context.parent,
                path: `${context.path || ''}[${index}]`, // Build array-style path
            });
        });

        // Cast the resulting array to the inferred tuple type
        return result as TupleOutputType<T>;
    };

    return new SchemaImpl<TupleOutputType<T>>(generator, {}); // No specific options or fluent methods
}
